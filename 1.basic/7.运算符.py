
# 算术运算符
# + - * / % ** //（取整除）
print(9//2) # 4
print(-9//2) # -5

# 比较运算符
# == !=  > < >=  <=

# 赋值运算符
  # =	简单的赋值运算符	c = a + b 将 a + b 的运算结果赋值为 c
  # += 加法赋值运算符 c += a 等效于 c = c + a
  # -= 减法赋值运算符 c -= a 等效于 c = c - a
  # *= 乘法赋值运算符 c *= a 等效于 c = c * a
  # /= 除法赋值运算符 c /= a 等效于 c = c / a
  # %= 取模赋值运算符 c %= a 等效于 c = c % a
  # **= 幂赋值运算符 c **= a 等效于 c = c ** a
  # //= 取整除赋值运算符 c //= a 等效于 c = c // a
# python3.8 新加 海象运算符 := 海象运算符，可在表达式内部为变量赋值。
# if (n: = len(a)) > 10:
#     print(f"List is too long ({n} elements, expected <= 10)")


# Python 位运算符
'''
a = 0011 1100
b = 0000 1101

-----------------

a&b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a  = 1100 0011
'''

'''
&	按位与运算符：
  参与运算的两个值, 如果两个相应位都为1, 则该位的结果为1, 否则为0(a & b) 输出结果 12 ，
  二进制解释： 0000 1100
|	按位或运算符：
  只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，
  二进制解释： 0011 1101
^	按位异或运算符：
  当两对应的二进位相异时，结果为1(a ^ b) 输出结果 49 ，
  二进制解释： 0011 0001
~	按位取反运算符：
  对数据的每个二进制位取反, 即把1变为0, 把0变为1。~x 类似于 - x-1	(~a) 输出结果 - 61 ，
  二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
<< 左移动运算符：
  运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。 a << 2 输出结果 240 ，
  二进制解释： 1111 0000
>> 右移动运算符：
  把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数 a >> 2 输出结果 15 ，
  二进制解释： 0000 1111
'''
a = 60            # 60 = 0011 1100
b = 13            # 13 = 0000 1101
c = 0

c = a & b        # 12 = 0000 1100
print("1 - c 的值为：", c)

c = a | b        # 61 = 0011 1101
print("2 - c 的值为：", c)

c = a ^ b        # 49 = 0011 0001
print("3 - c 的值为：", c)

c = ~a           # -61 = 1100 0011
print("4 - c 的值为：", c)

c = a << 2       # 240 = 1111 0000
print("5 - c 的值为：", c)

c = a >> 2       # 15 = 0000 1111
print("6 - c 的值为：", c)


#  逻辑运算符  a 为 10, b为 20:
'''
and 
  x and y	
  布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	
  (a and b) 返回 20。
or 
  x or y	
  布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。	
  (a or b) 返回 10。
not 
  not x	
  布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 
  not(a and b) 返回 False
'''


# 成员运算符 in /not in
a = 10
b = 20
list = [1, 2, 3, 4, 5]

if (a in list):
   print("1 - 变量 a 在给定的列表中 list 中")
else:
   print("1 - 变量 a 不在给定的列表中 list 中")

if (b not in list):
   print("2 - 变量 b 不在给定的列表中 list 中")
else:
   print("2 - 变量 b 在给定的列表中 list 中")

# 修改变量 a 的值
a = 2
if (a in list):
   print("3 - 变量 a 在给定的列表中 list 中")
else:
   print("3 - 变量 a 不在给定的列表中 list 中")


# 身份运算符  is  is not     (id()函数用于获取对象内存地址。)
''' 
is 
  is 是判断两个标识符是不是引用自一个对象
  x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 Fals
'''

# is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。

a = [1,2,3,4]
b = a
print(b is a)
print(b == a)
b = a[:]
print(b is a)
b == a
print(a,b)


# 运算符优先级
'''
** 指数(最高优先级)
~ + -	按位翻转, 一元加号和减号(最后两个的方法名为 + @ 和 - @)
* / % // 乘，除，求余数和取整除
+ - 加法减法
>> << 右移，左移运算符
&	位 'AND'
^ | 位运算符
<= < > >= 比较运算符
== != 等于运算符
= %= /= //= -= += *= **= 赋值运算符
is is not 身份运算符
in not in 成员运算符
not and or 逻辑运算符
'''



